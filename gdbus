#!/usr/bin/env ruby

require 'dbus'
require 'libglade2'

class DBusUI
  def initialize
    @glade = GladeXML.new("gdbus.glade") { |h| method(h) } # This block is like
                                                           # black magic :)
    @systemtreeview = @glade.get_widget("systemtreeview")
    setup_treeview_renderer(@systemtreeview, 'D-Bus Clients')
    @sessiontreeview = @glade.get_widget("sessiontreeview")
    setup_treeview_renderer(@sessiontreeview, 'D-Bus Clients')

    @methsigtreeview = @glade.get_widget("methsigtreeview")
    # ierk
    setup_treeview_renderer(@methsigtreeview, 'Methods')
    @window = @glade.get_widget("window1")

    @window.show_all
    start_buses
  end

  def on_sessiontreeview_row_activated(view, path, column)
    name = view.model.get_iter(path)[0]
    puts "Clicked on: #{name.inspect}"
#    if not name =~ /^:/
#      model = Gtk::TreeStore.new(String)
#      @methsigtreeview.model = model
#      proxy = @sessionbus.introspect(name)
#      proxy.each_pair do |path, intfs|
#        intfs.each_pair do |k, v|
#          iter = model.append(nil)
#          iter[0] = k
#          v.interface.methods.keys.each do |m|
#            subiter = model.append(iter)
#            subiter[0] = m
#          end
#        end
#      end
#    end
  end

  def on_window_delete_event(window, event)
    Gtk.main_quit
  end

  def setup_treeview_renderer(treeview, str)
    renderer = Gtk::CellRendererText.new
    col_offset = treeview.insert_column(-1, str, renderer, 'text' => 0)
    column = treeview.get_column(col_offset - 1)
    column.clickable = true
  end

  def process_input(bus)
    while ret = bus.poll_message
      bus.process(ret)
    end
  end

  def start_buses
    @sessionbus = DBus::Connection.new(ENV["DBUS_SESSION_BUS_ADDRESS"])
    @sessionbus.connect
    @systembus = DBus::Connection.new(DBus::SystemSocketName)
    @systembus.connect

    # This is how we install a glib main loop listener.
    # Soooo trivial after all.
    gio = GLib::IOChannel.new(@sessionbus.socket.fileno)
    gio.add_watch(GLib::IOChannel::IN) { |c, ch|
      process_input(@sessionbus)
      true
    }
    gio = GLib::IOChannel.new(@systembus.socket.fileno)
    gio.add_watch(GLib::IOChannel::IN) { |c, ch|
      process_input(@systembus)
      true
    }

    @sessionbus.on_return(@sessionbus.proxy.ListNames) do |msg, array|
      model = Gtk::TreeStore.new(String)
      array.sort.each do |el|
        if not el =~ /^:/ and not el == "org.freedesktop.DBus" and not el =~ /gaim/
          Gtk.idle_add do
            puts el
            puts "introspect #{el}"
            proxy = @sessionbus.introspect(el)
            puts "out introspect #{el}"
            proxy.keys.sort.each do |path|
              intfs = proxy[path]
              iter = model.append(nil)
              iter[0] = path
              intfs.keys.sort.each do |k|
                subiter = model.append(iter)
                subiter[0] = k
              end
            end
            false
          end
        end
      end
      @sessiontreeview.model = model
    end

#    @systembus.on_return(@systembus.proxy.ListNames) do |msg, array|
#      puts "high"
#      model = Gtk::TreeStore.new(String)
#      array.each do |el|
#        iter = model.append(nil)
#        iter[0] = el
#      end
#      @systemtreeview.model = model
#    end
  end

  def main
    Gtk.main
  end
end

DBusUI.new.main
