#!/usr/bin/env ruby

require 'dbus'
require 'libglade2'

class MethodCallWindow
  def initialize(pwindow, intf, meth)
    @intf, @meth = intf, meth
    @entries = Array.new
    @dialog = Gtk::Dialog.new(meth.name, pwindow,
                             Gtk::Dialog::MODAL | Gtk::Dialog::NO_SEPARATOR,
                             [Gtk::Stock::OK, Gtk::Dialog::RESPONSE_OK],
                             [Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL])

    @meth.params.each do |param|
      shbox = Gtk::HBox.new(false, 0)
      label = Gtk::Label.new("#{param[0]} (#{param[1]})")
      input = Gtk::Entry.new
      @entries << input
      shbox.pack_start(label, true, true, 0)
      shbox.pack_start(input, true, true, 0)
      @dialog.vbox.pack_start(shbox, true, true, 0)
      @dialog.vbox.show_all
    end
  end

  def run
    on_ok if @dialog.run == Gtk::Dialog::RESPONSE_OK
    @dialog.destroy
  end

  def on_ok
    bus = @intf.object.bus
    m = DBus::Message.new(DBus::Message::METHOD_CALL)
    m.path = @intf.object.path
    m.interface = @intf.name
    m.destination = @intf.object.destination
    m.member = @meth.name
    m.sender = bus.unique_name
    @meth.params.each_with_index do |param, idx|
      entry = @entries[idx]
      data = nil
      case param[1]
      when "u"
        data = entry.text.to_i
      when "s"
        data = entry.text
      when /^a/
        begin
          data = eval(entry.text)
        rescue
          puts "Incorrect data: #{data}"
        end
      end
      m.add_param(param[1], data)
    end
    bus.send(m.marshall)
    bus.on_return(m) do |retm|
      p retm.params
    end
  end
end

class DBusUI
  def initialize
    @glade = GladeXML.new("gdbus.glade") { |h| method(h) } # This block is like
                                                           # black magic :)
    @sessiontreeview = @glade.get_widget("sessiontreeview")
    setup_treeview_renderer(@sessiontreeview, 'D-Bus Objects')
    @sessiontreeview.selection.signal_connect("changed") do |selection|
      on_treeview_selection_changed(selection)
    end

    @systemtreeview = @glade.get_widget("systemtreeview")
    setup_treeview_renderer(@systemtreeview, 'D-Bus Objects')
    @systemtreeview.selection.signal_connect("changed") do |selection|
      on_treeview_selection_changed(selection)
    end

    @methsigtreeview = @glade.get_widget("methsigtreeview")
    # ierk
    setup_treeview_renderer(@methsigtreeview, 'Methods')

    @window = @glade.get_widget("window1")
    @window.show_all
    start_buses
  end

  def beautify_method(meth)
    s = meth.name + "("
    s += (meth.params.collect { |a| "in #{a[0]}:#{a[1]}" } +
          meth.rets.collect { |a| "out #{a[0]}:#{a[1]}" }).join(", ")
    s += ")"
    s
  end

  def on_treeview_selection_changed(selection)
    selected = selection.selected
    model = Gtk::ListStore.new(String, DBus::Method, DBus::ProxyObjectInterface)
    @methsigtreeview.model = model
    if selected
      if intf = selected[1]
        intf.methods.keys.sort.each do |mi|
          m = intf.methods[mi]
          subiter = model.append
          subiter[0] = beautify_method(m)
          subiter[1] = m
          subiter[2] = intf
        end
      end
    end
  end

  def on_method_activated(view, path, column)
    name = view.model.get_iter(path)[0]
    puts "Clicked on: #{name.inspect}"
    method = view.model.get_iter(path)[1]
    intf = view.model.get_iter(path)[2]
    MethodCallWindow.new(@window, intf, method).run
  end

  def on_sessiontreeview_row_activated(view, path, column)
    name = view.model.get_iter(path)[0]
    puts "Clicked on: #{name.inspect}"
    intf = view.model.get_iter(path)[1]
  end

  def on_window_delete_event(window, event)
    Gtk.main_quit
  end

  def setup_treeview_renderer(treeview, str)
    renderer = Gtk::CellRendererText.new
    col_offset = treeview.insert_column(-1, str, renderer, 'text' => 0)
    column = treeview.get_column(col_offset - 1)
    column.clickable = true
  end

  def process_input(bus)
    # THIS is the bad ass loop
    # we should return to the glib main loop from time to time. Anyone with a
    # proper way to handle it ?
    puts "process_input"
    bus.update_buffer
    bus.messages.each do |msg|
      bus.process(msg)
    end
  end

  def introspect_path(bus, model, parent, el, path)
    Gtk::idle_add_priority(GLib::PRIORITY_LOW) do
      puts "introspect (#{el}, #{path})"
      bus.introspect(el, path) do |proxy|
        puts "reply introspect (#{el}, #{path})"
        proxy.subnodes.sort.each do |node|
          if path == "/"
            npath = "/" +  node
          else
            npath = path + "/" + node
          end
          iter = model.append(parent)
          iter[0] = node
          introspect_path(bus, model, iter, el, npath)
        end
        proxy.interfaces.sort.each do |intfname|
          iter = model.append(parent)
          iter[0] = intfname
          iter[1] = proxy[intfname]
        end
      end
      false
    end
  end

  def start_buses
    @channels = []
    @sessionbus = DBus::Connection.new(ENV["DBUS_SESSION_BUS_ADDRESS"])
    @sessionbus.connect
    @systembus = DBus::Connection.new(DBus::SystemSocketName)
    @systembus.connect
    
    # This is how we install a glib main loop listener.
    # Soooo trivial after all.
    gio = GLib::IOChannel.new(@sessionbus.socket.fileno)
    @channels << gio
    gio.add_watch(GLib::IOChannel::IN) { |c, ch|
      process_input(@sessionbus)
      true
    }
#    gio = GLib::IOChannel.new(@systembus.socket.fileno)
#    @channels << gio
#    gio.add_watch(GLib::IOChannel::IN) { |c, ch|
#      process_input(@systembus)
#      true
#    }

    @sessionbus.proxy.ListNames do |msg, names|
      fill_treeview(@sessionbus, @sessiontreeview, names)
    end
    @systembus.proxy.ListNames do |msg, names|
      fill_treeview(@systembus, @systemtreeview, names)
    end
  end

  def fill_treeview(bus, treeview, array)
    model = Gtk::TreeStore.new(String, DBus::ProxyObjectInterface)
    treeview.model = model
    array.sort.each do |el|
      if not el =~ /^:/
        iter = model.append(nil)
        iter[0] = el
          introspect_path(bus, model, iter, el, "/")
      end
    end
  end

  def main
    Gtk.main
  end
end

DBusUI.new.main
