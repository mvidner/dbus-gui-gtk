#!/usr/bin/env ruby

require 'dbus'
require 'libglade2'

class DBusUI
  def initialize
    @glade = GladeXML.new("gdbus.glade") { |h| method(h) } # This block is like
                                                           # black magic :)
    @sessiontreeview = @glade.get_widget("sessiontreeview")
    setup_treeview_renderer(@sessiontreeview, 'D-Bus Objects')
    @sessiontreeview.selection.signal_connect("changed") do |selection|
      on_treeview_selection_changed(selection)
    end

    @systemtreeview = @glade.get_widget("systemtreeview")
    setup_treeview_renderer(@systemtreeview, 'D-Bus Objects')
    @systemtreeview.selection.signal_connect("changed") do |selection|
      on_treeview_selection_changed(selection)
    end


    @methsigtreeview = @glade.get_widget("methsigtreeview")
    # ierk
    setup_treeview_renderer(@methsigtreeview, 'Methods')

    @window = @glade.get_widget("window1")
    @window.show_all
    start_buses
  end

  def beautify_method(meth)
    s = meth.name + "("
    s += (meth.params.collect { |a| "in " + a } +
          meth.rets.collect { |a| "out " + a }).join(", ")
    s += ")"
    s
  end

  def on_treeview_selection_changed(selection)
    selected = selection.selected
    model = Gtk::ListStore.new(String)
    @methsigtreeview.model = model
    if selected
      if intf = selected[1]
        
        intf.methods.keys.sort.each do |mi|
          m = intf.methods[mi]
          subiter = model.append
          subiter[0] = beautify_method(m)
        end
      end
    end
  end

  def on_sessiontreeview_row_activated(view, path, column)
    name = view.model.get_iter(path)[0]
    puts "Clicked on: #{name.inspect}"
    intf = view.model.get_iter(path)[1]
    if intf
    end
#    if not name =~ /^:/
#      model = Gtk::TreeStore.new(String)
#      @methsigtreeview.model = model
#      proxy = @sessionbus.introspect(name)
#      proxy.each_pair do |path, intfs|
#        intfs.each_pair do |k, v|
#          iter = model.append(nil)
#          iter[0] = k
#          v.interface.methods.keys.each do |m|
#            subiter = model.append(iter)
#            subiter[0] = m
#          end
#        end
#      end
#    end
  end

  def on_window_delete_event(window, event)
    Gtk.main_quit
  end

  def setup_treeview_renderer(treeview, str)
    renderer = Gtk::CellRendererText.new
    col_offset = treeview.insert_column(-1, str, renderer, 'text' => 0)
    column = treeview.get_column(col_offset - 1)
    column.clickable = true
  end

  def process_input(bus)
    while ret = bus.poll_message
      bus.process(ret)
    end
  end

  def introspect_path(bus, model, parent, el, path)
    puts "introspect (#{el}, #{path})"
    bus.introspect(el, path) do |proxy|
      puts "reply introspect (#{el}, #{path})"
      proxy.subnodes.sort.each do |node|
        if path == "/"
          npath = "/" +  node
        else
          npath = path + "/" + node
        end
        iter = model.append(parent)
        iter[0] = node
        #Gtk.idle_add do
          introspect_path(bus, model, iter, el, npath)
          false
        #end
      end
      proxy.interfaces.sort.each do |intfname|
        iter = model.append(parent)
        iter[0] = intfname
        iter[1] = proxy[intfname]
      end
    end
  end

  def start_buses
    @sessionbus = DBus::Connection.new(ENV["DBUS_SESSION_BUS_ADDRESS"])
    @sessionbus.connect
    #@systembus = DBus::Connection.new(DBus::SystemSocketName)
    #@systembus.connect
    
    # This is how we install a glib main loop listener.
    # Soooo trivial after all.
    gio = GLib::IOChannel.new(@sessionbus.socket.fileno)
    gio.add_watch(GLib::IOChannel::IN) { |c, ch|
      process_input(@sessionbus)
      true
    }
#    gio = GLib::IOChannel.new(@systembus.socket.fileno)
#    gio.add_watch(GLib::IOChannel::IN) { |c, ch|
#      process_input(@systembus)
#      true
#    }

    @sessionbus.on_return(@sessionbus.proxy.ListNames) do |msg, array|
      fill_treeview(@sessionbus, @sessiontreeview, array)
    end
#    @systembus.on_return(@systembus.proxy.ListNames) do |msg, array|
#      fill_treeview(@systembus, @systemtreeview, array)
#    end
  end

  def fill_treeview(bus, treeview, array)
    model = Gtk::TreeStore.new(String, DBus::ProxyObjectInterface)
    treeview.model = model
    array.sort.each do |el|
      if not el =~ /^:/
        iter = model.append(nil)
        iter[0] = el
        Gtk.idle_add do
          introspect_path(bus, model, iter, el, "/")
          false
        end
      end
    end
  end

  def main
    Gtk.main
  end
end

DBusUI.new.main

