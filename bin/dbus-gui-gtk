#!/usr/bin/env ruby
# frozen_string_literal: true

#
# This is a quite complex example using internal lower level API.
# Not a good starting point, but might be usefull if you want to do tricky
# stuff.
# -- Arnaud

require "dbus"
require "gtk3"

class MethodCallWindow
  # @param pwindow [Gtk::Window]
  # @param intf [DBus::ProxyObjectInterface]
  # @param meth [DBus::Method]
  def initialize(pwindow, intf, meth)
    @intf = intf
    @meth = meth
    @entries = []
    @dialog = Gtk::Dialog.new(
      title: meth.name, parent: pwindow, flags: :modal,
      buttons: [
        [Gtk::Stock::OK, :ok],
        [Gtk::Stock::CANCEL, :cancel]
      ]
    )
    @dialog.set_default_response(:ok)

    @meth.params.each do |param|
      shbox = Gtk::Box.new(:horizontal, 0)
      shbox.set_homogeneous(true)
      label = Gtk::Label.new("#{param[0]} (#{param[1]})")
      input = Gtk::Entry.new
      @entries << input
      shbox.pack_start(label, expand: true, fill: true, padding: 0)
      shbox.pack_start(input, expand: true, fill: true, padding: 0)
      @dialog.child.pack_start(shbox, expand: true, fill: true, padding: 0)
      @dialog.child.show_all
    end
  end

  def run
    drun = @dialog.run
    on_ok if drun == Gtk::ResponseType::OK
    @dialog.destroy
  end

  # @param type [DBus::SingleCompleteType]
  # @param input [String]
  # @return [Object]
  def parse_input(type, input)
    data = nil
    case type
    when "u", "i"
      data = input.to_i
    when "s"
      data = input
    when /^a/
      begin
        data = eval(input)
      rescue
        puts "Incorrect data: #{input.inspect}"
      end
    end
    data
  end

  def on_ok
    bus = @intf.object.bus
    m = DBus::Message.new(DBus::Message::METHOD_CALL)
    m.path = @intf.object.path
    m.interface = @intf.name
    m.destination = @intf.object.destination
    m.member = @meth.name
    m.sender = bus.unique_name
    @meth.params.each_with_index do |param, idx|
      entry = @entries[idx]
      data = parse_input(param[1], entry.text)
      m.add_param(param[1], data)
    end
    bus.send_sync_or_async(m) do |retm|
      if retm.is_a?(DBus::Error)
        e = retm
        puts "  #{e.dbus_message.error_name}: #{e.inspect}"
      else
        puts "Method #{m.member} returns: #{retm.params.inspect}"
      end
    end
  end
end

class InterfaceView
  # @param tree_view [Gtk::TreeView]
  def initialize(tree_view)
    @tree_view = tree_view

    setup_methodview_renderer(@tree_view)
    @tree_view.signal_connect("row-activated") do |view, path, column|
      on_method_activated(view, path, column)
    end
  end

  # @param treeview [Gtk::TreeView]
  def setup_methodview_renderer(treeview)
    renderer = Gtk::CellRendererText.new
    _col_offset = treeview.insert_column(-1, "T", renderer, "text" => 1)
    col_offset = treeview.insert_column(-1, "Name", renderer, "text" => 0)
    column = treeview.get_column(col_offset - 1)
    column.clickable = true
  end

  def beautify_method(meth)
    # Damn, this need to be rewritten :p
    s = "#{meth.name}("
    case meth
    when DBus::Method
      s += (meth.params.collect { |a| "in #{a[0]}:#{a[1]}" } +
            meth.rets.collect { |a| "out #{a[0]}:#{a[1]}" }).join(", ")
    when DBus::Signal
      s += (meth.params.collect { |a| "in #{a[0]}:#{a[1]}" }).join(", ")
    end
    s += ")"
    s
  end

  # @param intf [DBus::ProxyObjectInterface]
  def fill(intf)
    model = Gtk::ListStore.new(String, String, DBus::Method,
                               DBus::ProxyObjectInterface)
    @tree_view.model = model

    intf.methods.keys.sort.each do |mi|
      m = intf.methods[mi]
      subiter = model.append
      subiter[0] = beautify_method(m)
      subiter[1] = "M"
      subiter[2] = m
      subiter[3] = intf
    end
    intf.signals.keys.sort.each do |mi|
      m = intf.signals[mi]
      subiter = model.append
      subiter[0] = beautify_method(m)
      subiter[1] = "S"
      subiter[2] = m
      subiter[3] = intf
    end
    intf.properties.keys.sort.each do |mi|
      m = intf.properties[mi]
      subiter = model.append
      subiter[0] = "#{m.name}: #{m.type} (#{m.access})"
      subiter[1] = "P"
      subiter[2] = m
      subiter[3] = intf
    end
  end

  # @param view [Gtk::TreeView]
  # @param path [Gtk::TreePath]
  # @param _column [Gtk::TreeViewColumn]
  def on_method_activated(view, path, _column)
    iter = view.model.get_iter(path)
    name = iter[0]
    puts "Clicked on: #{name.inspect}"
    type = iter[1]
    case type
    when "M"
      method = iter[2]
      intf = iter[3]
      MethodCallWindow.new(@window, intf, method).run
    when "S"
      signal = iter[2]
      intf = iter[3]
      mr = DBus::MatchRule.new.from_signal(intf, signal)
      puts "*** Registering matchrule: #{mr} ***"
      intf.object.bus.add_match(mr) do |sig|
        puts "Got #{sig.member}(#{sig.params.join(",")})"
      end
    when "P"
      property = iter[2]
      intf = iter[3]
      begin
        value = intf[property.name.to_s]
        puts "  #{value.inspect}"
      rescue DBus::Error => e
        puts "  #{e.dbus_message.error_name}: #{e.inspect}"
      end
    end
  end
end

class BusView
  attr_reader :bus

  # @param bus [DBus::BusConnection]
  # @param tree_view [Gtk::TreeView]
  # @param interface_view [InterfaceView]
  def initialize(bus, tree_view, interface_view)
    @bus = bus
    # call glibize to get dbus messages from the glib mainloop
    @bus.glibize

    @tree_view = tree_view
    @interface_view = interface_view

    setup_treeview_renderer(@tree_view, "D-Bus Objects")
    @tree_view.selection.signal_connect("changed") do |selection|
      on_treeview_selection_changed(selection)
    end

    @bus.proxy.ListNames do |_msg, names|
      fill_treeview(names)
    end
  end

  # @param treeview [Gtk::TreeView]
  def setup_treeview_renderer(treeview, str)
    renderer = Gtk::CellRendererText.new
    col_offset = treeview.insert_column(-1, str, renderer, "text" => 0)
    column = treeview.get_column(col_offset - 1)
    column.clickable = true
  end

  # @param model
  #   https://docs.gtk.org/gtk3/iface.TreeModel.html
  # @param iter [Gtk::TreeIter]
  # @param node [DBus::Node]
  def walk_node(model, iter, node)
    node.each_pair do |key, val|
      subiter = model.append(iter)
      subiter[0] = key
      subiter[2] = "full"
      walk_node(model, subiter, val)
    end

    return if node.object.nil?

    node.object.interfaces.sort.each do |ifname|
      subiter = model.append(iter)
      subiter[0] = ifname
      subiter[1] = node.object[ifname]
      subiter[2] = "full"
    end
  end

  # @param service_names_remaining [Array<String>]
  def introspect_services(service_names_remaining)
    sname = service_names_remaining.shift
    if sname !~ /^:/
      model = @tree_view.model
      iter = model.append(nil)
      iter[0] = sname
      iter[2] = "empty"
    end

    # once we return false, Gtk Idle will stop calling us
    !service_names_remaining.empty?
  end

  # @param service_names [Array<String>]
  def fill_treeview(service_names)
    # the 3rd param should be Boolean. how?
    model = Gtk::TreeStore.new(String, DBus::ProxyObjectInterface, String)
    @tree_view.model = model
    service_names = service_names.sort
    GLib::Idle.add { introspect_services(service_names) }
  end

  # @param selection [Gtk::TreeSelection]
  def on_treeview_selection_changed(selection)
    iter = selection.selected
    return unless iter

    if iter[2] == "empty"
      sname = iter[0]
      begin
        puts "introspecting: #{bus.class} #{sname}"
        service = bus.service(sname).introspect
        walk_node(@tree_view.model, iter, service.root)
        iter[2] = "full"
      rescue DBus::Error => e
        puts "  #{e.dbus_message.error_name}: #{e.inspect}"
      end
    end

    intf = iter[1]
    return unless intf

    @interface_view.fill(intf)
  end
end

class DBusUI
  def initialize
    @glade = Gtk::Builder.new
    @glade.add_from_file(File.expand_path("dbus-gui-gtk.ui", __dir__))

    @interface_view = InterfaceView.new(@glade.get_object("methsigtreeview"))

    @session_view = BusView.new(
      DBus::SessionBus.instance,
      @glade.get_object("sessiontreeview"),
      @interface_view
    )

    @system_view = BusView.new(
      DBus::SystemBus.instance,
      @glade.get_object("systemtreeview"),
      @interface_view
    )

    @window = @glade.get_object("window1")
    @window.signal_connect("delete-event") { Gtk.main_quit }
    @window.show_all
  end

  def main
    Gtk.main
  end
end

DBusUI.new.main
